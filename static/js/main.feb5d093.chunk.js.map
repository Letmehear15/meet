{"version":3,"sources":["hook.ts","Loading.tsx","ActionComponent.tsx","Layout.tsx","actions.ts","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["useRedirect","path","history","useHistory","redirect","push","useStyles","makeStyles","root","position","width","height","display","justifyContent","alignItems","Loading","classes","Paper","square","className","CircularProgress","flexDirection","header","top","left","action","padding","whiteSpace","ActionComponent","name","startSomeAction","useState","loading","setLoading","useEffect","id","setTimeout","clearInterval","IconButton","onClick","Typography","dangerouslySetInnerHTML","__html","align","Button","variant","button","marginTop","Layout","setName","tempName","setTempName","Box","TextField","value","onChange","e","target","label","disabled","color","getAction","actionLength","length","theme","createTheme","palette","type","App","setAction","useCallback","random","Math","floor","ThemeProvider","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.feb5d093.chunk.js","sourcesContent":["import { useHistory } from \"react-router-dom\"\n\nexport const useRedirect = (path: string) => {\n    const history = useHistory()\n\n    const redirect = () => {\n        history.push(`/${path}`)\n    }\n\n    return {\n        redirect\n    }\n    \n}","import { CircularProgress, makeStyles, Paper } from '@material-ui/core';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    }\n}))\n\nexport const Loading = () => {\n    const classes = useStyles()\n  return (\n    <Paper square className={classes.root}>\n      <CircularProgress />\n    </Paper>\n  );\n};\n","import { makeStyles, Paper, IconButton, Typography, Button } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport { useRedirect } from './hook';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { Loading } from './Loading';\n\ntype ActionProps = {\n  action: string;\n  name: string;\n  startSomeAction: () => void\n};\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    position: 'relative',\n    width: '100%',\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 10,\n  },\n  action: {\n    padding: 25,\n    whiteSpace: 'pre-line',\n  },\n}));\n\nexport const ActionComponent: FC<ActionProps> = ({name, action, startSomeAction }) => {\n  const { redirect } = useRedirect('');\n  const classes = useStyles();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n      if(!name) {\n        redirect()\n      }\n    const id = setTimeout(() => {\n        setLoading(false);\n      }, 3000);\n    return () => clearInterval(id);\n  }, [action, name, redirect]);\n\n  if (loading) {\n    return <Loading />;\n  }\n  return (\n    <Paper className={classes.root} square>\n      <header className={classes.header}>\n        <IconButton onClick={redirect}>\n          <ArrowBackIosIcon />\n        </IconButton>\n      </header>\n      <Typography dangerouslySetInnerHTML={{__html: action}} align='center' className={classes.action}></Typography>\n      <Button variant='outlined' onClick={startSomeAction}>One more time</Button>\n    </Paper>\n  );\n};\n","import { Box, Button, makeStyles, Paper, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { FC } from 'react';\nimport { useState } from 'react';\nimport { useRedirect } from './hook';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    height: '100vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    marginTop: 20\n  },\n}));\n\ntype LayoutProps = {\n    setName: (name: string) => void\n    startSomeAction: () => void\n}\n\nexport const Layout:FC<LayoutProps> = ({setName, startSomeAction}) => {\n  const [tempName, setTempName] = useState('');\n  const { redirect } = useRedirect('action');\n  const classes = useStyles();\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = e;\n    setTempName(value);\n  };\n\n  const onClick = () => {\n    setName(tempName)\n    redirect()\n    startSomeAction()\n  }\n\n  return (\n    <Paper square className={classes.root}>\n      <Box display='flex' flexDirection='column'>\n        <TextField value={tempName} onChange={onChange} id=\"name\" label=\"Name\" />\n        <Button\n          disabled={!tempName}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClick}\n          className={classes.button}\n        >\n          Play\n        </Button>\n      </Box>\n    </Paper>\n  );\n};\n","export const getAction = (name = ``) => [\n    `<b>Action</b>:\n    Scissors Rock Paper game.\n    ( If Alex wins - quick kiss, if ${name} wins - just hugging)`,\n    `<b>Action</b>:\n    Call Alex`,\n    `<b>Action</b>:\n    Finger fight.\n    ( If Alex wins - quick kiss, if ${name} wins - just hugging)`,\n    `<b>Action</b>:\n    Quick kiss`,\n    `<b>Action</b>:\n    Follow each other on Instagram`,\n    `<b>Action</b>:\n    Take a selfie`,\n    `<b>Action</b>:\n    Quick kiss`,\n    `<b>Question</b>:\n    The best moment of your life`,\n    `<b>Question</b>:\n    Advantages and disadvantages of being a girl`,\n    `<b>Action</b>:\n    Quick kiss`,\n    `<b>Question</b>:\n    What achievement are you proud of`,\n    `<b>Question</b>:\n    In what century was the best fashion`,\n    `<b>Action</b>:\n    Quick kiss`,\n    `<b>Question</b>:\n    Post-Apocalypse Survival Strategy`,\n    `<b>Question</b>:\n    What is your best idea under alcohol`,\n    `<b>Action</b>:\n    Quick kiss`,\n]\n\nexport const actionLength = getAction().length","import { Route } from 'react-router-dom';\nimport { ActionComponent } from './ActionComponent';\nimport { Layout } from './Layout';\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\nimport React from 'react';\nimport { useState } from 'react';\nimport { actionLength, getAction } from './actions';\nimport { useCallback } from 'react';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nexport const App = () => {\n  const [name, setName] = useState('');\n  const [action, setAction] = useState('')\n  \n  const startSomeAction = useCallback(() => {\n    const random = Math.floor(Math.random() * actionLength);\n    const action = getAction(name)[random];\n    setAction(action)\n  }, [name])\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Route exact path=\"/\" component={() => <Layout setName={setName} startSomeAction={startSomeAction}/>} />\n      <Route path=\"/action\" component={() => <ActionComponent name={name} action={action} startSomeAction={startSomeAction}/>} />\n    </ThemeProvider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport  {HashRouter } from 'react-router-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './index.css'\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}